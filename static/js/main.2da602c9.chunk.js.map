{"version":3,"sources":["components/API.ts","components/Utils.ts","components/QuestionCard.tsx","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","response","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","Typography","variant","color","answer","index","Button","sx","mt","disabled","value","onClick","TOTAL_QUESTIONS","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","console","log","className","Stack","alignItems","Paper","length","e","currentTarget","previous","answerObject","correctAnswer","nextQuestions","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.2da602c9.chunk.js","sourcesContent":["import { shuffleArray } from \"./Utils\";\r\n\r\nexport interface Question {\r\n  category: string;\r\n  type: string;\r\n  difficulty: string;\r\n  question: string;\r\n  correct_answer: string;\r\n  incorrect_answers: string[];\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\"\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const response = await fetch(endpoint);\r\n  const data = await response.json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer\r\n    ])\r\n  }));\r\n};\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","import React from \"react\";\r\nimport { AnswerObject } from \"../App\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\ninterface QuestionCardProps {\r\n  question: string;\r\n  answers: string[];\r\n  callback: any;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNumber: number;\r\n  totalQuestions: number;\r\n  setNumber: any;\r\n}\r\n\r\nconst QuestionCard: React.FC<QuestionCardProps> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNumber,\r\n  totalQuestions\r\n}) => (\r\n  <div>\r\n    <Typography variant=\"subtitle2\">\r\n      Question:{questionNumber}/{totalQuestions}\r\n    </Typography>\r\n    <Typography variant=\"subtitle1\" color=\"secondary\">\r\n      {question}\r\n    </Typography>\r\n    <div>\r\n      {answers.map((answer, index) => (\r\n        <div key={index}>\r\n          <Button\r\n            sx={{ mt: 1 }}\r\n            disabled={!!userAnswer}\r\n            variant=\"contained\"\r\n            value={answer}\r\n            onClick={callback}\r\n          >\r\n            <span>{answer}</span>\r\n          </Button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default QuestionCard;\r\n","import \"./styles.css\";\nimport React, { useState } from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport {\n  fetchQuizQuestions,\n  Difficulty,\n  QuestionState\n} from \"./components/API\";\nimport Stack from \"@mui/material/Stack\";\n\nimport Button from \"@mui/material/Button\";\nimport QuestionCard from \"./components/QuestionCard\";\n\nconst TOTAL_QUESTIONS = 10;\n\nexport interface AnswerObject {\n  question: string;\n  answer: string;\n  correctAnswer: string;\n}\n\nexport default function App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    try {\n      setLoading(true);\n      setGameOver(false);\n      const newQuestions = await fetchQuizQuestions(\n        TOTAL_QUESTIONS,\n        Difficulty.EASY\n      );\n      setQuestions(newQuestions);\n      setScore(0);\n      setUserAnswers([]);\n      setNumber(0);\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) {\n        setScore((previous: number) => previous + 1);\n      }\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correctAnswer: questions[number].correct_answer\n      };\n\n      setUserAnswers((previous) => [...previous, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestions = number + 1;\n    if (nextQuestions === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestions);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Stack alignItems=\"center\">\n        <Paper variant=\"outlined\">\n          <h1>React Quiz</h1>\n          {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n            <Button color=\"primary\" variant=\"contained\" onClick={startTrivia}>\n              Start\n            </Button>\n          ) : null}\n\n          {!gameOver ? <p className=\"score\">Score:{score}</p> : null}\n          {loading && <p>Loadaing Questions.... </p>}\n          {!loading && !gameOver && (\n            <QuestionCard\n              questionNumber={number + 1}\n              totalQuestions={TOTAL_QUESTIONS}\n              question={questions[number].question}\n              answers={questions[number].answers}\n              userAnswer={userAnswers[number]}\n              callback={checkAnswer}\n              setNumber={setNumber}\n            />\n          )}\n          {!gameOver &&\n            !loading &&\n            userAnswers.length === number + 1 &&\n            number !== TOTAL_QUESTIONS && (\n              <div>\n                <Button\n                  onClick={nextQuestion}\n                  color=\"primary\"\n                  variant=\"contained\"\n                  disabled={number === TOTAL_QUESTIONS - 1}\n                >\n                  Next Question\n                </Button>\n              </div>\n            )}\n        </Paper>\n      </Stack>\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}